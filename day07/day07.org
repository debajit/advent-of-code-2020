* Day 7

https://adventofcode.com/2020/day/7

** Part 1

*** Problem

... consider the following rules:

#+begin_example
light red bags contain 1 bright white bag, 2 muted yellow bags.
dark orange bags contain 3 bright white bags, 4 muted yellow bags.
bright white bags contain 1 shiny gold bag.
muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.
shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.
dark olive bags contain 3 faded blue bags, 4 dotted black bags.
vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.
faded blue bags contain no other bags.
dotted black bags contain no other bags.
#+end_example

These rules specify the required contents for 9 bag types. In this example, every faded blue bag is empty, every vibrant plum bag contains 11 bags (5 faded blue and 6 dotted black), and so on.

You have a shiny gold bag. If you wanted to carry it in at least one other bag, how many different bag colors would be valid for the outermost bag? (In other words: how many colors can, eventually, contain at least one shiny gold bag?)

In the above rules, the following options would be available to you:

- A bright white bag, which can hold your shiny gold bag directly.
- A muted yellow bag, which can hold your shiny gold bag directly, plus some other bags.
- A dark orange bag, which can hold bright white and muted yellow bags, either of which could then hold your shiny gold bag.
- A light red bag, which can hold bright white and muted yellow bags, either of which could then hold your shiny gold bag.

So, in this example, the number of bag colors that can eventually contain at least one shiny gold bag is 4.

*How many bag colors can eventually contain at least one shiny gold bag?*
(The list of rules is quite long; make sure you get all of it.)

*** Solution

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :flags -std=c++17 :results verbatim
  #include <fstream>
  #include <vector>
  #include <utility>
  #include <unordered_map>
  #include <unordered_set>
  #include <regex>
  using namespace std;

  const regex containerRegex(R"((.*) bags contain (.*)\.)");
  const regex bagSpecRegex(R"((\d+) (\w+\ \w+) bags?)");

  class Graph {

  public:

      void addEdge(const string& from, const string& to) {
          adjList[from].push_back(to);
      }

      int getContainerCount(const string& target) {
          unordered_set<string> path;

          // For each vertex, we will check to see if a path exists from
          // that vertex to the target vertex. Along the way, we will
          // keep track of the vertices encounterd in the path. All
          // these vertices can contain the target bag.
          for (const auto& [vertex, _canHoldList] : adjList) {
              pathExistsDFS(vertex, target, path);
          }

          return path.size();
      }

  private:

      unordered_map<string, vector<string>> adjList;

      bool pathExistsDFS(const string& fromVertex, const string& toVertex, unordered_set<string>& path) {
          path.insert(fromVertex);

          for (const auto& neighbor : adjList[fromVertex]) {
              if (neighbor == toVertex) {
                  return true;
              }
              else if (pathExistsDFS(neighbor, toVertex, path)) {
                  return true;
              }
          }

          path.erase(fromVertex);
          return false;
      }
  };

  int main() {
      ifstream file("input");
      Graph graph;
      string line;
      smatch match;
      string container, smallerBags, bagSpec;

      while (getline(file, line)) {
          if (regex_search(line, match, containerRegex)) {
              container = match.str(1);
              smallerBags = match.str(2);
              // cout << "Container: " << container << ", smaller: " << smallerBags << "\n";

              stringstream ss(smallerBags);
              while(getline(ss, bagSpec, ',')) {
                  // cout << "  bagSpec: " << bagSpec << "\n";
                  if (regex_search(bagSpec, match, bagSpecRegex)) {
                      string count = match.str(1);
                      string color = match.str(2);
                      // cout << "    count: " << count << "\n";
                      // cout << "    color: " << color << "\n";

                      graph.addEdge(container, color);
                  }
              }
          }
      }

      cout << graph.getContainerCount("shiny gold");
      file.close();
  }
#+end_src

#+RESULTS:
: 289

**** Output

#+begin_example
: 289
#+end_example
